# Personal Pipeline Docker Registry Makefile
# Authored by: DevOps Infrastructure Engineer
# Date: 2025-01-16

.PHONY: help registry-init registry-start registry-stop registry-restart registry-status registry-health
.PHONY: registry-build registry-push registry-images registry-clean registry-logs
.PHONY: registry-users-add registry-users-remove registry-users-list
.PHONY: registry-backup registry-restore registry-backup-list
.PHONY: registry-setup-tls registry-ui

# Configuration
REGISTRY_URL ?= localhost:5000
IMAGE_NAME ?= personal-pipeline-mcp
VERSION ?= latest
REGISTRY_SCRIPT = ./registry/scripts/registry-manager.sh
AUTH_SCRIPT = ./registry/scripts/setup-auth.sh
BUILD_SCRIPT = ./registry/scripts/build-multiarch.sh
BACKUP_SCRIPT = ./registry/scripts/backup.sh

# Colors
BLUE = \033[34m
GREEN = \033[32m
YELLOW = \033[33m
RED = \033[31m
NC = \033[0m

##@ Docker Registry Management

help: ## Display this help
	@echo "$(BLUE)Personal Pipeline Docker Registry Management$(NC)"
	@echo
	@awk 'BEGIN {FS = ":.*##"; printf "Usage:\n  make $(GREEN)<target>$(NC)\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  $(GREEN)%-25s$(NC) %s\n", $$1, $$2 } /^##@/ { printf "\n$(YELLOW)%s$(NC)\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Registry Operations

registry-init: ## Initialize registry with authentication
	@echo "$(BLUE)Initializing Personal Pipeline Registry...$(NC)"
	@$(REGISTRY_SCRIPT) init

registry-start: ## Start registry services
	@echo "$(BLUE)Starting registry services...$(NC)"
	@$(REGISTRY_SCRIPT) start

registry-stop: ## Stop registry services
	@echo "$(BLUE)Stopping registry services...$(NC)"
	@$(REGISTRY_SCRIPT) stop

registry-restart: ## Restart registry services
	@echo "$(BLUE)Restarting registry services...$(NC)"
	@$(REGISTRY_SCRIPT) restart

registry-status: ## Show registry status
	@$(REGISTRY_SCRIPT) status

registry-health: ## Check registry health
	@$(REGISTRY_SCRIPT) health

registry-logs: ## Show registry logs
	@$(REGISTRY_SCRIPT) logs

registry-logs-follow: ## Follow registry logs
	@$(REGISTRY_SCRIPT) logs --follow

registry-update-config: ## Update configuration and restart
	@echo "$(BLUE)Updating registry configuration...$(NC)"
	@$(REGISTRY_SCRIPT) update-config

##@ Image Management

registry-build: ## Build Personal Pipeline image
	@echo "$(BLUE)Building Personal Pipeline image...$(NC)"
	@$(BUILD_SCRIPT) --registry $(REGISTRY_URL) --image $(IMAGE_NAME) --version $(VERSION)

registry-build-push: ## Build and push Personal Pipeline image
	@echo "$(BLUE)Building and pushing Personal Pipeline image...$(NC)"
	@$(BUILD_SCRIPT) --registry $(REGISTRY_URL) --image $(IMAGE_NAME) --version $(VERSION) --push --test

registry-build-multiarch: ## Build multi-architecture image
	@echo "$(BLUE)Building multi-architecture image...$(NC)"
	@$(BUILD_SCRIPT) --registry $(REGISTRY_URL) --image $(IMAGE_NAME) --version $(VERSION) --platforms linux/amd64,linux/arm64

registry-push: ## Push existing image to registry
	@echo "$(BLUE)Pushing image to registry...$(NC)"
	@docker tag $(IMAGE_NAME):$(VERSION) $(REGISTRY_URL)/$(IMAGE_NAME):$(VERSION)
	@docker push $(REGISTRY_URL)/$(IMAGE_NAME):$(VERSION)

registry-pull: ## Pull image from registry
	@echo "$(BLUE)Pulling image from registry...$(NC)"
	@docker pull $(REGISTRY_URL)/$(IMAGE_NAME):$(VERSION)

registry-images: ## List images in registry
	@$(REGISTRY_SCRIPT) images

registry-login: ## Login to registry
	@echo "$(BLUE)Logging into registry...$(NC)"
	@docker login $(REGISTRY_URL)

##@ User Management

registry-users-add: ## Add registry user (usage: make registry-users-add USER=username PASS=password)
	@echo "$(BLUE)Adding registry user...$(NC)"
	@$(REGISTRY_SCRIPT) users add $(USER) $(PASS)

registry-users-remove: ## Remove registry user (usage: make registry-users-remove USER=username)
	@echo "$(BLUE)Removing registry user...$(NC)"
	@$(REGISTRY_SCRIPT) users remove $(USER)

registry-users-list: ## List registry users
	@$(REGISTRY_SCRIPT) users list

registry-auth-setup: ## Setup authentication interactively
	@$(AUTH_SCRIPT) setup

registry-auth-validate: ## Validate authentication configuration
	@$(AUTH_SCRIPT) validate

##@ Security

registry-setup-tls: ## Generate TLS certificates (usage: make registry-setup-tls HOSTNAME=localhost)
	@echo "$(BLUE)Generating TLS certificates...$(NC)"
	@$(AUTH_SCRIPT) tls $(or $(HOSTNAME),localhost)

##@ Backup and Restore

registry-backup: ## Create registry backup
	@echo "$(BLUE)Creating registry backup...$(NC)"
	@$(BACKUP_SCRIPT) create

registry-backup-list: ## List available backups
	@$(BACKUP_SCRIPT) list

registry-restore: ## Restore from backup (usage: make registry-restore BACKUP=backup_name.tar.gz)
	@echo "$(BLUE)Restoring from backup...$(NC)"
	@$(BACKUP_SCRIPT) restore $(BACKUP)

registry-backup-cleanup: ## Cleanup old backups
	@echo "$(BLUE)Cleaning up old backups...$(NC)"
	@$(BACKUP_SCRIPT) cleanup

registry-backup-setup-cron: ## Setup automated backups
	@echo "$(BLUE)Setting up automated backups...$(NC)"
	@$(BACKUP_SCRIPT) setup-cron

##@ Maintenance

registry-clean: ## Clean registry data (requires confirmation)
	@echo "$(RED)WARNING: This will delete ALL registry data!$(NC)"
	@echo "To confirm, run: $(REGISTRY_SCRIPT) clean --confirm"

registry-clean-confirm: ## Clean registry data with confirmation
	@echo "$(RED)Cleaning all registry data...$(NC)"
	@$(REGISTRY_SCRIPT) clean --confirm

registry-prune: ## Prune unused registry data
	@echo "$(BLUE)Pruning unused registry data...$(NC)"
	@docker system prune -f
	@docker volume prune -f

##@ Development

registry-dev-setup: ## Complete development setup
	@echo "$(BLUE)Setting up development environment...$(NC)"
	@make registry-init
	@make registry-start
	@make registry-build-push
	@make registry-status

registry-dev-reset: ## Reset development environment
	@echo "$(BLUE)Resetting development environment...$(NC)"
	@make registry-stop
	@make registry-clean-confirm
	@make registry-dev-setup

##@ Information

registry-info: ## Show registry access information
	@echo "$(BLUE)Personal Pipeline Registry Information$(NC)"
	@echo
	@echo "$(GREEN)Registry Endpoints:$(NC)"
	@echo "  Registry URL:     http://$(REGISTRY_URL)"
	@echo "  Registry UI:      http://localhost:8080"
	@echo
	@echo "$(GREEN)Quick Commands:$(NC)"
	@echo "  Login:            docker login $(REGISTRY_URL)"
	@echo "  Push Image:       docker push $(REGISTRY_URL)/image:tag"
	@echo "  Pull Image:       docker pull $(REGISTRY_URL)/image:tag"
	@echo
	@echo "$(GREEN)Management:$(NC)"
	@echo "  Build & Push:     make registry-build-push"
	@echo "  Show Status:      make registry-status"
	@echo "  View Logs:        make registry-logs-follow"

registry-urls: ## Show registry URLs
	@echo "$(GREEN)Registry URLs:$(NC)"
	@echo "  Registry:    http://$(REGISTRY_URL)"
	@echo "  UI:          http://localhost:8080"
	@echo "  Cache:       http://localhost:5001"

registry-curl-examples: ## Show curl examples for registry API
	@echo "$(BLUE)Registry API Examples:$(NC)"
	@echo
	@echo "$(GREEN)List repositories:$(NC)"
	@echo "  curl -u username:password http://$(REGISTRY_URL)/v2/_catalog"
	@echo
	@echo "$(GREEN)List tags:$(NC)"
	@echo "  curl -u username:password http://$(REGISTRY_URL)/v2/$(IMAGE_NAME)/tags/list"
	@echo
	@echo "$(GREEN)Get manifest:$(NC)"
	@echo "  curl -u username:password -H 'Accept: application/vnd.docker.distribution.manifest.v2+json' \\"
	@echo "    http://$(REGISTRY_URL)/v2/$(IMAGE_NAME)/manifests/$(VERSION)"

##@ Testing

registry-test: ## Run registry tests
	@echo "$(BLUE)Testing registry functionality...$(NC)"
	@make registry-health
	@make registry-images
	@echo "$(GREEN)Registry tests completed$(NC)"

registry-test-build: ## Test build and push process
	@echo "$(BLUE)Testing build and push process...$(NC)"
	@make registry-build-push
	@make registry-images
	@echo "$(GREEN)Build and push test completed$(NC)"

registry-test-multiarch: ## Test multi-architecture build
	@echo "$(BLUE)Testing multi-architecture build...$(NC)"
	@$(BUILD_SCRIPT) --registry $(REGISTRY_URL) --platforms linux/amd64,linux/arm64 --push --test
	@echo "$(GREEN)Multi-architecture test completed$(NC)"

##@ Docker Compose Shortcuts

up: ## Start registry with docker-compose
	@docker-compose -f docker-compose.registry.yml up -d

down: ## Stop registry with docker-compose
	@docker-compose -f docker-compose.registry.yml down

ps: ## Show registry container status
	@docker-compose -f docker-compose.registry.yml ps

logs-compose: ## Show docker-compose logs
	@docker-compose -f docker-compose.registry.yml logs

##@ Quick Start

quick-start: ## Complete quick start setup
	@echo "$(BLUE)Personal Pipeline Registry Quick Start$(NC)"
	@echo
	@echo "$(YELLOW)Step 1: Initialize registry$(NC)"
	@make registry-init
	@echo
	@echo "$(YELLOW)Step 2: Start services$(NC)"
	@make registry-start
	@echo
	@echo "$(YELLOW)Step 3: Build and push image$(NC)"
	@make registry-build-push
	@echo
	@echo "$(GREEN)âœ… Registry is ready!$(NC)"
	@make registry-info

# Default target
.DEFAULT_GOAL := help