# ==============================================================================
# Personal Pipeline MCP Server - Docker Compose Configuration
# ==============================================================================
# Complete development and testing environment with Redis caching
# Supports both local development and production deployment scenarios

version: '3.8'

# ==============================================================================
# Services
# ==============================================================================
services:
  # Personal Pipeline MCP Server
  personal-pipeline:
    build:
      context: ..
      dockerfile: Dockerfile
      target: runtime
    image: personal-pipeline/mcp-server:latest
    container_name: personal-pipeline-mcp
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "${PP_PORT:-3000}:3000"
    
    # Environment variables
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PORT=3000
      - HOST=0.0.0.0
      - REDIS_URL=redis://redis:6379
      - CONFIG_PATH=/app/config/config.yaml
      - CACHE_DIR=/app/cache
      - DATA_DIR=/app/data
      - LOG_DIR=/app/logs
    
    # Volume mounts
    volumes:
      # Configuration (read-only)
      - ${CONFIG_DIR:-../config}:/app/config:ro
      # Persistent data
      - personal-pipeline-data:/app/data
      - personal-pipeline-cache:/app/cache
      - personal-pipeline-logs:/app/logs
      # Optional: Mount local test data for development
      - ${TEST_DATA_DIR:-../test-data}:/app/test-data:ro
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
    
    # Health check
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    
    # Networks
    networks:
      - personal-pipeline-network

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: personal-pipeline-redis
    restart: unless-stopped
    
    # Port mapping (internal only by default)
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    # Redis configuration
    command: >
      redis-server 
      --appendonly yes
      --appendfsync everysec
      --maxmemory ${REDIS_MAX_MEMORY:-128mb}
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
    
    # Volume for persistence
    volumes:
      - personal-pipeline-redis-data:/data
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'
    
    # Networks
    networks:
      - personal-pipeline-network

  # Redis Commander (Development UI - Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: personal-pipeline-redis-ui
    restart: unless-stopped
    profiles:
      - development
      - debug
    
    # Port mapping
    ports:
      - "${REDIS_UI_PORT:-8081}:8081"
    
    # Environment
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_UI_USER:-admin}
      - HTTP_PASSWORD=${REDIS_UI_PASSWORD:-admin123}
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
    
    # Networks
    networks:
      - personal-pipeline-network

# ==============================================================================
# Networks
# ==============================================================================
networks:
  personal-pipeline-network:
    driver: bridge
    name: personal-pipeline-network

# ==============================================================================
# Volumes
# ==============================================================================
volumes:
  # Application data
  personal-pipeline-data:
    driver: local
    name: personal-pipeline-data
  
  personal-pipeline-cache:
    driver: local
    name: personal-pipeline-cache
  
  personal-pipeline-logs:
    driver: local
    name: personal-pipeline-logs
  
  # Redis data
  personal-pipeline-redis-data:
    driver: local
    name: personal-pipeline-redis-data

# ==============================================================================
# Configuration Examples
# ==============================================================================
# Environment file (.env) example:
#
# NODE_ENV=development
# LOG_LEVEL=debug
# PP_PORT=3000
# REDIS_PORT=6379
# REDIS_MAX_MEMORY=256mb
# REDIS_UI_PORT=8081
# REDIS_UI_USER=admin
# REDIS_UI_PASSWORD=secure123
# CONFIG_DIR=./config
# TEST_DATA_DIR=./test-data
#
# Usage examples:
#
# Development with Redis UI:
# docker-compose --profile development up -d
#
# Production deployment:
# docker-compose up -d
#
# Debug mode with all services:
# docker-compose --profile debug up -d
#
# Custom configuration:
# CONFIG_DIR=/path/to/config docker-compose up -d
#
# Scale the application:
# docker-compose up -d --scale personal-pipeline=3