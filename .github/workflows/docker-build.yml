# ==============================================================================
# Personal Pipeline MCP Server - Docker Build and Deploy Workflow (Legacy)
# ==============================================================================
# DEPRECATED: This workflow is superseded by the unified CI/CD system
# Use the following workflows instead:
#   - ci.yml for pull request validation
#   - build.yml for main branch builds
#   - release.yml for releases
#
# This workflow remains for backward compatibility and manual Docker builds

name: Docker Build and Deploy (Legacy)

on:
  # Manual triggering only - automated builds now handled by unified CI/CD
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
      push_to_registry:
        description: 'Push to registry'
        required: false
        default: 'true'
        type: boolean
      target_registry:
        description: 'Target registry'
        required: false
        default: 'ghcr'
        type: choice
        options:
          - dockerhub
          - ghcr
          - both
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: 'false'
        type: boolean

# ==============================================================================
# Environment Variables
# ==============================================================================
env:
  IMAGE_NAME: personal-pipeline/mcp-server
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: ""

# ==============================================================================
# Jobs
# ==============================================================================
jobs:
  # ==============================================================================
  # Code Quality and Testing
  # ==============================================================================
  test:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run typecheck
      
      - name: Run tests
        run: npm run test:coverage
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # ==============================================================================
  # Docker Build and Test
  # ==============================================================================
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{sha}},enable={{is_default_branch}}
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image-${{ strategy.job-index }}.tar
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-${{ strategy.job-index }}
          path: /tmp/image-${{ strategy.job-index }}.tar
          retention-days: 1

  # ==============================================================================
  # Container Testing
  # ==============================================================================
  docker-test:
    name: Container Testing
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image-0  # Use amd64 image for testing
          path: /tmp
      
      - name: Load Docker image
        run: docker load --input /tmp/image-0.tar
      
      - name: Run container tests
        run: |
          chmod +x docker/scripts/test.sh
          docker/scripts/test.sh --verbose --timeout 120
      
      - name: Container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==============================================================================
  # Multi-Architecture Build and Push
  # ==============================================================================
  docker-push:
    name: Build & Push Multi-Arch Images
    runs-on: ubuntu-latest
    needs: [test, docker-test]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Login to Docker Hub
        if: github.event.inputs.target_registry == 'dockerhub' || github.event.inputs.target_registry == 'both' || github.event.inputs.target_registry == ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to GitHub Container Registry
        if: github.event.inputs.target_registry == 'ghcr' || github.event.inputs.target_registry == 'both' || github.event.inputs.target_registry == ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            name=${{ env.IMAGE_NAME }},enable=${{ github.event.inputs.target_registry == 'dockerhub' || github.event.inputs.target_registry == 'both' || github.event.inputs.target_registry == '' }}
            name=${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }},enable=${{ github.event.inputs.target_registry == 'ghcr' || github.event.inputs.target_registry == 'both' || github.event.inputs.target_registry == '' }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' }}
          labels: |
            org.opencontainers.image.title=Personal Pipeline MCP Server
            org.opencontainers.image.description=Intelligent MCP server for documentation retrieval and incident response
            org.opencontainers.image.vendor=Personal Pipeline Team
            org.opencontainers.image.licenses=MIT
      
      - name: Build and push multi-architecture images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event.inputs.push_to_registry != 'false' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  # ==============================================================================
  # Deployment Notification
  # ==============================================================================
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: docker-push
    if: always() && github.event_name != 'pull_request'
    
    steps:
      - name: Notify success
        if: needs.docker-push.result == 'success'
        run: |
          echo "🎉 Docker images successfully built and pushed!"
          echo "Images available at:"
          if [[ "${{ github.event.inputs.target_registry }}" == "dockerhub" || "${{ github.event.inputs.target_registry }}" == "both" || "${{ github.event.inputs.target_registry }}" == "" ]]; then
            echo "  - Docker Hub: docker pull ${{ env.IMAGE_NAME }}:latest"
          fi
          if [[ "${{ github.event.inputs.target_registry }}" == "ghcr" || "${{ github.event.inputs.target_registry }}" == "both" || "${{ github.event.inputs.target_registry }}" == "" ]]; then
            echo "  - GHCR: docker pull ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest"
          fi
      
      - name: Notify failure
        if: needs.docker-push.result == 'failure'
        run: |
          echo "❌ Docker build/push failed!"
          echo "Check the workflow logs for details."
          exit 1

# ==============================================================================
# Workflow Examples and Usage
# ==============================================================================
# This workflow can be triggered in several ways:
#
# 1. Automatic triggers:
#    - Push to main/develop branch
#    - Create a tag (v1.0.0, v1.2.3, etc.)
#    - Open/update pull request to main
#
# 2. Manual trigger (workflow_dispatch):
#    - Go to Actions tab in GitHub
#    - Select "Docker Build and Deploy"
#    - Click "Run workflow"
#    - Specify custom tag and registry options
#
# 3. Required secrets (set in repository settings):
#    - DOCKERHUB_USERNAME: Docker Hub username
#    - DOCKERHUB_TOKEN: Docker Hub access token
#    - GITHUB_TOKEN: Automatically provided by GitHub
#
# 4. Optional secrets for additional registries:
#    - AWS_ACCESS_KEY_ID: For AWS ECR
#    - AWS_SECRET_ACCESS_KEY: For AWS ECR
#    - AZURE_CLIENT_ID: For Azure ACR
#    - AZURE_CLIENT_SECRET: For Azure ACR
#
# The workflow will:
# - Run code quality checks and tests
# - Build multi-architecture Docker images (amd64, arm64)
# - Test containers for functionality and security
# - Push to specified registries with proper tagging
# - Provide deployment notifications