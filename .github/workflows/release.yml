# ==============================================================================
# Personal Pipeline MCP Server - Release Workflow
# ==============================================================================
# Automated release preparation with version management
# Creates release artifacts ready for publishing

name: Release

on:
  # Trigger on release tags
  push:
    tags:
      - 'v*'
  
  # Allow manual release creation
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        default: 'patch'
        options:
          - patch
          - minor
          - major
          - prerelease
      create_release:
        description: 'Create GitHub release'
        required: false
        default: 'true'
        type: boolean
      publish_npm:
        description: 'Publish to npm registry'
        required: false
        default: 'false'
        type: boolean
      publish_docker:
        description: 'Push Docker images'
        required: false
        default: 'false'
        type: boolean
      release_notes:
        description: 'Custom release notes'
        required: false
        default: ''

# ==============================================================================
# Environment Variables
# ==============================================================================
env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'localhost:4873'
  IMAGE_NAME: personal-pipeline/mcp-server
  REGISTRY_GHCR: ghcr.io

# ==============================================================================
# Jobs
# ==============================================================================
jobs:
  # ==============================================================================
  # Release Preparation
  # ==============================================================================
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      release-id: ${{ steps.release-id.outputs.release-id }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      is-prerelease: ${{ steps.version.outputs.prerelease }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --verbose
      
      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ refs/tags/v.* ]]; then
            # Extract version from tag
            VERSION="${GITHUB_REF#refs/tags/v}"
            TAG="v$VERSION"
            echo "Using tag version: $VERSION"
          elif [[ -n "${{ github.event.inputs.version_bump }}" ]]; then
            # Manual version bump
            echo "Creating new version with bump: ${{ github.event.inputs.version_bump }}"
            bash scripts/version.sh ${{ github.event.inputs.version_bump }} --skip-git
            VERSION=$(node -e "console.log(JSON.parse(require('fs').readFileSync('package.json', 'utf8')).version)")
            TAG="v$VERSION"
          else
            # Use current version
            VERSION=$(node -e "console.log(JSON.parse(require('fs').readFileSync('package.json', 'utf8')).version)")
            TAG="v$VERSION"
            echo "Using current version: $VERSION"
          fi
          
          # Determine if prerelease
          if [[ "$VERSION" == *"-"* ]]; then
            PRERELEASE="true"
          else
            PRERELEASE="false"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "Final version: $VERSION"
          echo "Tag: $TAG"
          echo "Prerelease: $PRERELEASE"
      
      - name: Generate release ID
        id: release-id
        run: |
          RELEASE_ID="release-$(date +%Y%m%d-%H%M%S)-${{ steps.version.outputs.version }}"
          echo "release-id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "Generated release ID: $RELEASE_ID"
      
      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generating changelog..."
          
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [[ -n "$LAST_TAG" && "$LAST_TAG" != "${{ steps.version.outputs.tag }}" ]]; then
            COMMIT_RANGE="$LAST_TAG..HEAD"
            echo "Generating changelog from $LAST_TAG to HEAD"
          else
            COMMIT_RANGE="HEAD"
            echo "Generating changelog for all commits"
          fi
          
          # Generate commit log
          COMMITS=$(git log "$COMMIT_RANGE" --oneline --no-merges --grep="^feat\|^fix\|^perf\|^refactor\|^chore" || echo "")
          
          # Create changelog content
          CHANGELOG_FILE="RELEASE_CHANGELOG.md"
          cat > "$CHANGELOG_FILE" << EOF
          # Release ${{ steps.version.outputs.version }}
          
          **Release Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Version:** ${{ steps.version.outputs.version }}
          **Tag:** ${{ steps.version.outputs.tag }}
          
          ## What's Changed
          
          EOF
          
          if [[ -n "$COMMITS" ]]; then
            echo "### Commits in this release:" >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
            echo "$COMMITS" | while read -r commit; do
              echo "- $commit" >> "$CHANGELOG_FILE"
            done
          else
            echo "- No notable changes in this release" >> "$CHANGELOG_FILE"
          fi
          
          cat >> "$CHANGELOG_FILE" << EOF
          
          ## Installation
          
          ### npm Package
          \`\`\`bash
          npm install @personal-pipeline/mcp-server@${{ steps.version.outputs.version }}
          \`\`\`
          
          ### Docker Image
          \`\`\`bash
          docker pull ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          \`\`\`
          
          ## Docker Image Information
          
          - **Multi-architecture support:** linux/amd64, linux/arm64
          - **Registry:** GitHub Container Registry (GHCR)
          - **Size:** Optimized Alpine-based image
          - **Security:** Regularly scanned for vulnerabilities
          
          ## Verification
          
          ### Package Integrity
          \`\`\`bash
          npm audit @personal-pipeline/mcp-server@${{ steps.version.outputs.version }}
          \`\`\`
          
          ### Docker Image Verification
          \`\`\`bash
          docker run --rm ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} npm run health
          \`\`\`
          
          ---
          **Full Changelog:** https://github.com/\${{ github.repository }}/compare/\$LAST_TAG...${{ steps.version.outputs.tag }}
          EOF
          
          # Add custom release notes if provided
          if [[ -n "${{ github.event.inputs.release_notes }}" ]]; then
            cat >> "$CHANGELOG_FILE" << EOF
          
          ## Additional Notes
          
          ${{ github.event.inputs.release_notes }}
          EOF
          fi
          
          # Output for use in other steps (using EOF delimiter for multiline)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat "$CHANGELOG_FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Changelog generated"
      
      - name: Create version commit and tag
        if: github.event.inputs.version_bump != ''
        run: |
          echo "📝 Creating version commit and tag..."
          
          # Stage version changes
          git add package.json CHANGELOG.md
          
          # Create commit
          git commit -m "chore: release version ${{ steps.version.outputs.version }}

          🚀 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          # Create tag
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.version }}

          📦 Release with automated build and testing

          🚀 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          echo "✅ Version commit and tag created"
      
      - name: Upload release metadata
        uses: actions/upload-artifact@v4
        with:
          name: release-metadata-${{ steps.release-id.outputs.release-id }}
          path: |
            RELEASE_CHANGELOG.md
            package.json
          retention-days: 90

  # ==============================================================================
  # Build Release Artifacts
  # ==============================================================================
  build-artifacts:
    name: Build Release Artifacts
    needs: prepare-release
    uses: ./.github/workflows/build.yml
    with:
      force_rebuild: true
      build_target: 'all'
      push_artifacts: false
      verbose: true
    secrets: inherit

  # ==============================================================================
  # Package npm Release
  # ==============================================================================
  package-npm:
    name: Package npm Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-artifacts]
    
    outputs:
      package-tarball: ${{ steps.package.outputs.tarball }}
      package-size: ${{ steps.package.outputs.size }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: npm-package-registry-ready
          path: ./
      
      - name: Update package version
        run: |
          echo "📝 Updating package.json version to ${{ needs.prepare-release.outputs.version }}"
          npm version ${{ needs.prepare-release.outputs.version }} --no-git-tag-version
      
      - name: Create npm package
        id: package
        run: |
          echo "📦 Creating npm package..."
          
          # Create package tarball
          npm pack
          
          # Get tarball name and size
          TARBALL=$(ls *.tgz)
          SIZE=$(du -sh "$TARBALL" | cut -f1)
          
          echo "tarball=$TARBALL" >> $GITHUB_OUTPUT
          echo "size=$SIZE" >> $GITHUB_OUTPUT
          
          echo "✅ Package created: $TARBALL ($SIZE)"
      
      - name: Validate package
        run: |
          echo "🧪 Validating npm package..."
          
          # Extract and validate package contents
          tar -tzf ${{ steps.package.outputs.tarball }} | head -20
          
          # Test package installation in temporary directory
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          
          # Install the package
          npm init -y
          npm install "$GITHUB_WORKSPACE/${{ steps.package.outputs.tarball }}"
          
          # Test basic imports
          node -e "
            try {
              const pkg = require('@personal-pipeline/mcp-server');
              console.log('✅ Package imports successfully');
              console.log('Available exports:', Object.keys(pkg));
            } catch (error) {
              console.error('❌ Package import failed:', error.message);
              process.exit(1);
            }
          "
          
          echo "✅ Package validation passed"
      
      - name: Upload npm package
        uses: actions/upload-artifact@v4
        with:
          name: npm-release-${{ needs.prepare-release.outputs.version }}
          path: |
            ${{ steps.package.outputs.tarball }}
          retention-days: 90

  # ==============================================================================
  # Prepare Docker Release
  # ==============================================================================
  docker-release:
    name: Prepare Docker Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-artifacts]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Tag release images
        run: |
          echo "🏷️ Tagging Docker images for release..."
          
          VERSION="${{ needs.prepare-release.outputs.version }}"
          
          # Pull the latest built image
          docker pull ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest
          
          # Tag with version
          docker tag ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest \
                     ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:$VERSION
          
          # Push version tag if publishing is enabled
          if [[ "${{ github.event.inputs.publish_docker }}" == "true" ]]; then
            echo "📤 Pushing Docker images..."
            docker push ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:$VERSION
            
            # Update latest tag for stable releases
            if [[ "${{ needs.prepare-release.outputs.is-prerelease }}" == "false" ]]; then
              docker push ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest
            fi
          else
            echo "🔒 Docker publishing skipped (manual release)"
          fi
          
          echo "✅ Docker release preparation completed"

  # ==============================================================================
  # Security Validation
  # ==============================================================================
  security-validation:
    name: Release Security Validation
    runs-on: ubuntu-latest
    needs: [prepare-release, package-npm, docker-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download npm package
        uses: actions/download-artifact@v4
        with:
          name: npm-release-${{ needs.prepare-release.outputs.version }}
          path: ./release-artifacts/
      
      - name: Security scan npm package
        run: |
          echo "🛡️ Scanning npm package for security issues..."
          
          # Extract and scan package
          cd release-artifacts
          tar -xzf *.tgz
          cd package
          
          # Run npm audit on the package
          if npm audit --audit-level=high; then
            echo "✅ npm package security scan passed"
          else
            echo "❌ npm package has security vulnerabilities"
            exit 1
          fi
      
      - name: Security scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}
          format: 'json'
          output: 'docker-security-scan.json'
          severity: 'CRITICAL,HIGH'
      
      - name: Analyze security results
        run: |
          echo "📊 Analyzing security scan results..."
          
          if [[ -f "docker-security-scan.json" ]]; then
            # Check for critical vulnerabilities
            CRITICAL_COUNT=$(jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | length' docker-security-scan.json | wc -l)
            HIGH_COUNT=$(jq '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | length' docker-security-scan.json | wc -l)
            
            echo "🔍 Security scan results:"
            echo "   Critical vulnerabilities: $CRITICAL_COUNT"
            echo "   High vulnerabilities: $HIGH_COUNT"
            
            if [[ "$CRITICAL_COUNT" -gt 0 ]]; then
              echo "❌ Critical vulnerabilities found - release blocked"
              exit 1
            elif [[ "$HIGH_COUNT" -gt 5 ]]; then
              echo "⚠️ High number of high-severity vulnerabilities found"
              echo "Consider addressing these before release"
            fi
          fi
          
          echo "✅ Security validation completed"

  # ==============================================================================
  # Create GitHub Release
  # ==============================================================================
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, package-npm, docker-release, security-validation]
    if: needs.security-validation.result == 'success' && (github.event.inputs.create_release == 'true' || github.event_name == 'push')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: npm-release-${{ needs.prepare-release.outputs.version }}
          path: ./release-artifacts/
      
      - name: Download release metadata
        uses: actions/download-artifact@v4
        with:
          name: release-metadata-${{ needs.prepare-release.outputs.release-id }}
          path: ./release-metadata/
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          release_name: Personal Pipeline MCP Server ${{ needs.prepare-release.outputs.version }}
          body: ${{ needs.prepare-release.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}
      
      - name: Upload npm package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-artifacts/${{ needs.package-npm.outputs.package-tarball }}
          asset_name: personal-pipeline-mcp-server-${{ needs.prepare-release.outputs.version }}.tgz
          asset_content_type: application/gzip
      
      - name: Upload build summary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-metadata/RELEASE_CHANGELOG.md
          asset_name: RELEASE_NOTES.md
          asset_content_type: text/markdown

  # ==============================================================================
  # Publish to Registries
  # ==============================================================================
  publish-npm:
    name: Publish to npm Registry
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release, package-npm]
    if: github.event.inputs.publish_npm == 'true' && needs.create-release.result == 'success'
    
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
      
      - name: Download npm package
        uses: actions/download-artifact@v4
        with:
          name: npm-release-${{ needs.prepare-release.outputs.version }}
          path: ./
      
      - name: Publish to npm
        run: |
          echo "📤 Publishing to npm registry..."
          
          # Publish the package
          if [[ "${{ needs.prepare-release.outputs.is-prerelease }}" == "true" ]]; then
            npm publish ${{ needs.package-npm.outputs.package-tarball }} --tag beta
            echo "✅ Published as beta release"
          else
            npm publish ${{ needs.package-npm.outputs.package-tarball }}
            echo "✅ Published as stable release"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # ==============================================================================
  # Release Notification
  # ==============================================================================
  notify:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release, publish-npm]
    if: always()
    
    steps:
      - name: Determine release status
        id: status
        run: |
          CREATE_STATUS="${{ needs.create-release.result }}"
          PUBLISH_STATUS="${{ needs.publish-npm.result }}"
          
          if [[ "$CREATE_STATUS" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Release ${{ needs.prepare-release.outputs.version }} created successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Release creation failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Release summary
        run: |
          echo "🎉 Release Summary"
          echo "=================="
          echo "📝 Version: ${{ needs.prepare-release.outputs.version }}"
          echo "🏷️ Tag: ${{ needs.prepare-release.outputs.tag }}"
          echo "🔒 Prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}"
          echo "📦 GitHub Release: ${{ needs.create-release.result }}"
          echo "📤 npm Publish: ${{ needs.publish-npm.result }}"
          echo ""
          
          if [[ "${{ steps.status.outputs.status }}" == "success" ]]; then
            echo "✅ Release completed successfully!"
            echo ""
            echo "🔗 Links:"
            echo "   - GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }}"
            echo "   - npm Package: https://www.npmjs.com/package/@personal-pipeline/mcp-server"
            echo "   - Docker Image: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}"
          else
            echo "❌ Release failed. Check the workflow logs for details."
          fi

# ==============================================================================
# Release Workflow Summary
# ==============================================================================
# This release workflow provides comprehensive release management:
#
# 1. Preparation:
#    - Version determination (from tag or manual bump)
#    - Changelog generation
#    - Release metadata creation
#
# 2. Artifact Building:
#    - Coordinates with build workflow
#    - Creates npm packages and Docker images
#    - Validates all artifacts
#
# 3. Security Validation:
#    - Scans npm packages and Docker images
#    - Blocks releases with critical vulnerabilities
#    - Provides security reports
#
# 4. Release Creation:
#    - Creates GitHub releases with artifacts
#    - Handles both stable and prerelease versions
#    - Includes comprehensive release notes
#
# 5. Publishing:
#    - Optional npm registry publishing
#    - Docker image tagging and pushing
#    - Controlled by manual inputs
#
# The workflow supports both automated (tag-based) and manual releases,
# with comprehensive quality gates and security validation.