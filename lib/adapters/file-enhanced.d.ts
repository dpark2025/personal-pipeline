import { SourceAdapter } from './base.js';
import { FileSystemConfig, SearchResult, SearchFilters, HealthCheck, Runbook } from '../types/index.js';
export declare class EnhancedFileSystemAdapter extends SourceAdapter {
    private documents;
    private searchIndex;
    private basePaths;
    private supportedExtensions;
    private filePatterns;
    private recursive;
    private maxDepth;
    private extractMetadata;
    private pdfExtraction;
    private watchChanges;
    private watchers;
    private indexingInProgress;
    constructor(config: FileSystemConfig);
    initialize(): Promise<void>;
    refreshIndex(force?: boolean): Promise<boolean>;
    private indexDirectory;
    private buildGlobPatterns;
    private indexFile;
    private detectFileType;
    private isSupported;
    private readFileContent;
    private extractPdfText;
    private extractSearchableContent;
    private extractJsonSearchableContent;
    private extractFileMetadata;
    private generateDocumentId;
    private buildSearchIndex;
    private setupFileWatchers;
    private handleFileAdd;
    private handleFileChange;
    private handleFileRemove;
    search(query: string, filters?: SearchFilters): Promise<SearchResult[]>;
    private transformToSearchResult;
    private generateMatchReasons;
    getDocument(id: string): Promise<SearchResult | null>;
    searchRunbooks(alertType: string, severity: string, systems: string[]): Promise<Runbook[]>;
    private isValidRunbook;
    private createSyntheticRunbook;
    healthCheck(): Promise<HealthCheck>;
    getMetadata(): Promise<{
        name: string;
        type: string;
        documentCount: number;
        lastIndexed: string;
        avgResponseTime: number;
        successRate: number;
    }>;
    cleanup(): Promise<void>;
}
//# sourceMappingURL=file-enhanced.d.ts.map