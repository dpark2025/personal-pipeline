#!/bin/sh
#
# Pre-commit hook for Personal Pipeline MCP Server
# Comprehensive quality checks: security audit, formatting, linting, types, and tests
#
# This hook was automatically generated to ensure code quality.
# To bypass this hook temporarily, use: git commit --no-verify
#

set -e

echo "🔍 Running pre-commit checks..."

# Check if we're in a git repository (works with worktrees)
if ! git rev-parse --git-dir >/dev/null 2>&1; then
  echo "❌ Error: Not in a git repository"
  exit 1
fi

# Check if package.json exists
if [ ! -f package.json ]; then
  echo "❌ Error: package.json not found"
  exit 1
fi

# Function to print colored output
print_step() {
  echo "\n🔧 $1..."
}

print_success() {
  echo "✅ $1"
}

print_error() {
  echo "❌ $1"
}

print_warning() {
  echo "⚠️  $1"
}

# Step 1: Security audit with auto-fix
print_step "Running npm security audit"
AUDIT_OUTPUT=$(npm audit --audit-level=moderate 2>&1 || true)
if echo "$AUDIT_OUTPUT" | grep -q "found 0 vulnerabilities"; then
  print_success "No security vulnerabilities found"
elif echo "$AUDIT_OUTPUT" | grep -q "vulnerabilities"; then
  print_warning "Security vulnerabilities found, attempting auto-fix..."
  
  # Try non-breaking fixes first
  if npm audit fix >/dev/null 2>&1; then
    print_success "Security vulnerabilities auto-fixed (non-breaking)"
  else
    print_warning "Non-breaking fixes failed, trying force fix..."
    if npm audit fix --force >/dev/null 2>&1; then
      print_success "Security vulnerabilities auto-fixed (with force)"
      print_warning "Note: Force fixes may include breaking changes - please test thoroughly"
    else
      print_error "Failed to auto-fix security vulnerabilities"
      echo "Please review and fix manually:"
      npm audit --audit-level=moderate
      exit 1
    fi
  fi
else
  print_success "Security audit completed"
fi

# Step 2: Code formatting check and auto-fix
print_step "Running Prettier formatting check"
if npm run format:check >/dev/null 2>&1; then
  print_success "Code formatting is correct"
else
  print_warning "Code formatting issues found, auto-fixing..."
  if npm run format >/dev/null 2>&1; then
    print_success "Code formatting auto-fixed"
    # Add formatted files to staging area
    git add -u >/dev/null 2>&1 || true
  else
    print_error "Failed to auto-fix formatting"
    echo "Please fix formatting manually:"
    npm run format:check
    exit 1
  fi
fi

# Step 3: TypeScript compiler checks
print_step "Running TypeScript compiler checks"
if npm run typecheck >/dev/null 2>&1; then
  print_success "TypeScript checks passed"
else
  print_error "TypeScript checks failed"
  echo "Please fix TypeScript errors before committing."
  echo "Run: npm run typecheck"
  npm run typecheck 2>&1 | head -20
  exit 1
fi

# Step 4: ESLint checks with auto-fix attempt
print_step "Running ESLint"
if npm run lint >/dev/null 2>&1; then
  print_success "ESLint checks passed"
else
  print_warning "ESLint issues found, attempting auto-fix..."
  if npm run lint:fix >/dev/null 2>&1; then
    print_success "ESLint issues auto-fixed"
    # Add fixed files to staging area
    git add -u >/dev/null 2>&1 || true
    # Check if there are still unfixable issues
    if npm run lint >/dev/null 2>&1; then
      print_success "All ESLint issues resolved"
    else
      print_error "Some ESLint issues could not be auto-fixed"
      echo "Please fix remaining linting errors:"
      npm run lint 2>&1 | head -20
      exit 1
    fi
  else
    print_error "ESLint auto-fix failed"
    echo "Please fix linting errors manually:"
    npm run lint 2>&1 | head -20
    exit 1
  fi
fi

# Step 5: Run tests
print_step "Running tests"
if npm test >/dev/null 2>&1; then
  print_success "All tests passed"
else
  print_error "Tests failed"
  echo "Please fix failing tests before committing."
  echo "Run: npm test"
  npm test 2>&1 | head -20
  exit 1
fi

# All checks passed
echo "\n🎉 All pre-commit checks passed! Proceeding with commit..."