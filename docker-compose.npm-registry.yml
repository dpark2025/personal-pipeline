# Personal Pipeline - Private NPM Registry Infrastructure
# Authored by: Backend Technical Lead Agent
# Date: 2025-01-16
#
# Complete private NPM registry setup with:
# - Verdaccio NPM registry server
# - Authentication and user management
# - Package caching and proxy functionality
# - Registry monitoring and health checks
# - Integration with existing Docker infrastructure

version: '3.8'

services:
  # Verdaccio NPM Registry Service
  npm-registry:
    image: verdaccio/verdaccio:5.31.0
    container_name: pp-npm-registry
    restart: unless-stopped
    ports:
      - "4873:4873"
    environment:
      # Verdaccio Configuration
      VERDACCIO_USER_UID: 1001
      VERDACCIO_USER_GID: 1001
      VERDACCIO_APPDIR: /verdaccio
      
      # Node.js Configuration
      NODE_ENV: production
      NODE_OPTIONS: "--max-old-space-size=1024"
      
      # Registry Configuration
      VERDACCIO_PROTOCOL: http
      VERDACCIO_PORT: 4873
      
      # Logging Configuration
      LOG_LEVEL: info
      LOG_FORMAT: pretty
      
      # Security Configuration
      VERDACCIO_PUBLIC_URL: http://localhost:4873
      
      # Performance Tuning
      UV_THREADPOOL_SIZE: 16
    volumes:
      # Configuration
      - ./registry/npm/config:/verdaccio/conf:ro
      # Package storage
      - npm-registry-storage:/verdaccio/storage
      # Logs
      - npm-registry-logs:/verdaccio/logs
      # Plugins (for future extensions)
      - ./registry/npm/plugins:/verdaccio/plugins:ro
      # Authentication data
      - ./registry/npm/auth:/verdaccio/auth
    networks:
      - registry-network
      - npm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4873/-/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.personalpipeline.component=npm-registry"
      - "com.personalpipeline.environment=local"
      - "com.personalpipeline.version=5.31.0"
      - "com.personalpipeline.service=verdaccio"
    depends_on:
      - npm-registry-cache

  # NPM Registry Cache Service (Redis)
  npm-registry-cache:
    image: redis:7.2-alpine
    container_name: pp-npm-registry-cache
    restart: unless-stopped
    ports:
      - "6380:6379"
    environment:
      # Redis Configuration
      REDIS_PORT: 6379
      REDIS_DATABASES: 16
      REDIS_MAXMEMORY: 256mb
      REDIS_MAXMEMORY_POLICY: allkeys-lru
      
      # Security
      REDIS_PASSWORD: npm_registry_cache_2025
    command: >
      redis-server
      --port 6379
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
      --requirepass npm_registry_cache_2025
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - npm-cache-data:/data
      - ./registry/npm/redis:/usr/local/etc/redis:ro
    networks:
      - npm-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.personalpipeline.component=npm-cache"
      - "com.personalpipeline.environment=local"

  # NPM Registry Monitor
  npm-registry-monitor:
    image: prom/prometheus:v2.48.0
    container_name: pp-npm-registry-monitor
    restart: unless-stopped
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
    volumes:
      - ./registry/npm/monitoring:/etc/prometheus:ro
      - npm-monitoring-data:/prometheus
    networks:
      - npm-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.personalpipeline.component=npm-monitoring"
      - "com.personalpipeline.environment=local"
    depends_on:
      - npm-registry

  # NPM Registry Analytics
  npm-registry-analytics:
    image: grafana/grafana:10.2.0
    container_name: pp-npm-registry-analytics
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      # Grafana Configuration
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: npm_analytics_2025
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /var/lib/grafana/dashboards/npm-registry.json
      
      # Performance
      GF_METRICS_ENABLED: true
      GF_SERVER_ENABLE_GZIP: true
      
      # Logging
      GF_LOG_LEVEL: info
    volumes:
      - npm-analytics-data:/var/lib/grafana
      - ./registry/npm/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./registry/npm/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - npm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.personalpipeline.component=npm-analytics"
      - "com.personalpipeline.environment=local"
    depends_on:
      - npm-registry-monitor

  # NPM Registry Backup Service
  npm-registry-backup:
    image: alpine:3.19
    container_name: pp-npm-registry-backup
    restart: "no"
    environment:
      BACKUP_SCHEDULE: "0 3 * * *"  # Daily at 3 AM
      BACKUP_RETENTION_DAYS: "30"
      REGISTRY_DATA_PATH: "/registry-data"
      BACKUP_PATH: "/backups"
      COMPRESSION_LEVEL: "6"
    volumes:
      - npm-registry-storage:/registry-data:ro
      - npm-registry-backups:/backups
      - ./registry/npm/scripts:/scripts:ro
    networks:
      - npm-network
    command: ["/scripts/backup-npm.sh"]
    depends_on:
      - npm-registry
    labels:
      - "com.personalpipeline.component=npm-backup"
      - "com.personalpipeline.environment=local"

  # NPM Package Publisher Service
  npm-publisher:
    build:
      context: .
      dockerfile: registry/npm/Dockerfile.publisher
    container_name: pp-npm-publisher
    restart: "no"
    environment:
      NPM_REGISTRY_URL: http://npm-registry:4873
      NPM_AUTH_TOKEN: ${NPM_AUTH_TOKEN:-}
      PACKAGE_VERSION: ${PACKAGE_VERSION:-latest}
      DRY_RUN: ${DRY_RUN:-false}
      BUILD_NUMBER: ${BUILD_NUMBER:-local}
      GIT_COMMIT: ${GIT_COMMIT:-}
    volumes:
      - .:/workspace:ro
      - npm-publisher-cache:/root/.npm
    networks:
      - npm-network
    depends_on:
      - npm-registry
    labels:
      - "com.personalpipeline.component=npm-publisher"
      - "com.personalpipeline.environment=local"

# Networks
networks:
  # NPM-specific network
  npm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
    labels:
      - "com.personalpipeline.network=npm-registry"
  
  # Shared registry network (connect to existing Docker registry)
  registry-network:
    external: true

# Volumes
volumes:
  # NPM Registry Storage
  npm-registry-storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/registry/npm/storage
    labels:
      - "com.personalpipeline.volume=npm-storage"
      - "com.personalpipeline.backup=enabled"

  # NPM Registry Logs
  npm-registry-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/registry/npm/logs
    labels:
      - "com.personalpipeline.volume=npm-logs"
      - "com.personalpipeline.backup=disabled"

  # NPM Cache Data
  npm-cache-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/registry/npm/cache
    labels:
      - "com.personalpipeline.volume=npm-cache"
      - "com.personalpipeline.backup=disabled"

  # NPM Monitoring Data
  npm-monitoring-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/registry/npm/monitoring/data
    labels:
      - "com.personalpipeline.volume=npm-monitoring"
      - "com.personalpipeline.backup=enabled"

  # NPM Analytics Data
  npm-analytics-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/registry/npm/analytics
    labels:
      - "com.personalpipeline.volume=npm-analytics"
      - "com.personalpipeline.backup=enabled"

  # NPM Registry Backups
  npm-registry-backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/registry/npm/backups
    labels:
      - "com.personalpipeline.volume=npm-backups"
      - "com.personalpipeline.backup=disabled"

  # NPM Publisher Cache
  npm-publisher-cache:
    driver: local
    labels:
      - "com.personalpipeline.volume=npm-publisher-cache"
      - "com.personalpipeline.backup=disabled"